import {
  h
} from "./chunk-63HI22AQ.js";
import {
  Array_exports,
  Effect_exports,
  HashMap_exports,
  Match_exports,
  Option_exports,
  Ref_exports,
  Schema_exports,
  pipe
} from "./chunk-2WSEMKVZ.js";

// node_modules/cs12242-mvu/src/canvas.ts
var CanvasElement = Schema_exports.Union(
  Schema_exports.TaggedStruct("NullElement", {}),
  Schema_exports.TaggedStruct("Clear", {
    color: Schema_exports.String
  }),
  Schema_exports.TaggedStruct("Text", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    text: Schema_exports.String,
    color: Schema_exports.String,
    fontSize: Schema_exports.Int,
    font: Schema_exports.optionalWith(Schema_exports.String, {
      default: () => "sans-serif"
    }),
    textAlign: Schema_exports.optionalWith(
      Schema_exports.Union(
        Schema_exports.Literal("left"),
        //
        Schema_exports.Literal("center"),
        Schema_exports.Literal("right")
      ),
      {
        default: () => "center"
      }
    )
  }),
  Schema_exports.TaggedStruct("SolidCircle", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    radius: Schema_exports.Number,
    color: Schema_exports.String
  }),
  Schema_exports.TaggedStruct("OutlinedCircle", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    radius: Schema_exports.Number,
    color: Schema_exports.String,
    lineWidth: Schema_exports.Number
  }),
  Schema_exports.TaggedStruct("SolidRectangle", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    width: Schema_exports.Number,
    height: Schema_exports.Number,
    color: Schema_exports.String
  }),
  Schema_exports.TaggedStruct("OutlinedRectangle", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    width: Schema_exports.Number,
    height: Schema_exports.Number,
    color: Schema_exports.String,
    lineWidth: Schema_exports.Number
  }),
  Schema_exports.TaggedStruct("Line", {
    x1: Schema_exports.Number,
    y1: Schema_exports.Number,
    x2: Schema_exports.Number,
    y2: Schema_exports.Number,
    color: Schema_exports.String,
    lineWidth: Schema_exports.Number
  }),
  Schema_exports.TaggedStruct("Image", {
    x: Schema_exports.Number,
    y: Schema_exports.Number,
    src: Schema_exports.String
  })
);
var [
  NullElement,
  //
  Clear,
  Text,
  SolidCircle,
  OutlinedCircle,
  SolidRectangle,
  OutlinedRectangle,
  Line,
  CanvasImage
] = CanvasElement.members;
var CanvasMsg = Schema_exports.Union(
  Schema_exports.TaggedStruct("Canvas.MsgTick", {}),
  Schema_exports.TaggedStruct("Canvas.MsgKeyDown", {
    key: Schema_exports.String
  }),
  Schema_exports.TaggedStruct("Canvas.MsgMouseDown", {
    x: Schema_exports.Number,
    y: Schema_exports.Number
  })
);
var [MsgTick, MsgKeyDown, MsgMouseDown] = CanvasMsg.members;
var imageCacheRef = Ref_exports.unsafeMake(HashMap_exports.empty());
var canvasView = (width, height, fps, canvasId, view) => (model, dispatch) => Effect_exports.Do.pipe(
  Effect_exports.let(
    "canvas",
    () => document.getElementById(canvasId)
  ),
  Effect_exports.let("ctx", ({ canvas }) => canvas == null ? void 0 : canvas.getContext("2d")),
  Effect_exports.tap(
    ({ ctx }) => ctx != null ? pipe(
      view(model),
      Array_exports.map(
        (e) => Match_exports.value(e).pipe(
          Match_exports.tag(
            "Clear",
            ({ color }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.fillStyle = color),
              Effect_exports.tap(() => ctx.fillRect(0, 0, width, height)),
              Effect_exports.tap(() => ctx.fillStyle = "")
            )
          ),
          Match_exports.tag("NullElement", () => Effect_exports.void),
          Match_exports.tag(
            "Text",
            ({ x, y, text, color, font, fontSize, textAlign }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.fillStyle = color),
              Effect_exports.tap(() => ctx.textAlign = textAlign),
              Effect_exports.tap(() => ctx.font = `${fontSize}px ${font}`),
              Effect_exports.tap(() => ctx.fillText(text, x, y)),
              Effect_exports.tap(() => ctx.fillStyle = "")
            )
          ),
          Match_exports.tag(
            "SolidCircle",
            ({ x, y, radius, color }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.fillStyle = color),
              Effect_exports.tap(() => ctx.beginPath()),
              Effect_exports.tap(() => ctx.arc(x, y, radius, 0, 360)),
              Effect_exports.tap(() => ctx.fill()),
              Effect_exports.tap(() => ctx.closePath()),
              Effect_exports.tap(() => ctx.fillStyle = "")
            )
          ),
          Match_exports.tag(
            "OutlinedCircle",
            ({ x, y, radius, color, lineWidth }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.strokeStyle = color),
              Effect_exports.tap(() => ctx.lineWidth = lineWidth),
              Effect_exports.tap(() => ctx.beginPath()),
              Effect_exports.tap(() => ctx.arc(x, y, radius, 0, 360)),
              Effect_exports.tap(() => ctx.closePath()),
              Effect_exports.tap(() => ctx.strokeStyle = "")
            )
          ),
          Match_exports.tag(
            "SolidRectangle",
            ({ x, y, width: width2, height: height2, color }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.fillStyle = color),
              Effect_exports.tap(() => ctx.beginPath()),
              Effect_exports.tap(() => ctx.fillRect(x, y, width2, height2)),
              Effect_exports.tap(() => ctx.fill()),
              Effect_exports.tap(() => ctx.closePath()),
              Effect_exports.tap(() => ctx.fillStyle = "")
            )
          ),
          Match_exports.tag(
            "OutlinedRectangle",
            ({ x, y, width: width2, height: height2, color, lineWidth }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.strokeStyle = color),
              Effect_exports.tap(() => ctx.lineWidth = lineWidth),
              Effect_exports.tap(() => ctx.beginPath()),
              Effect_exports.tap(() => ctx.strokeRect(x, y, width2, height2)),
              Effect_exports.tap(() => ctx.closePath()),
              Effect_exports.tap(() => ctx.strokeStyle = "")
            )
          ),
          Match_exports.tag(
            "Line",
            ({ x1, y1, x2, y2, color, lineWidth }) => Effect_exports.void.pipe(
              Effect_exports.tap(() => ctx.strokeStyle = color),
              Effect_exports.tap(() => ctx.lineWidth = lineWidth),
              Effect_exports.tap(() => ctx.beginPath()),
              Effect_exports.tap(() => ctx.moveTo(x1, y1)),
              Effect_exports.tap(() => ctx.lineTo(x2, y2)),
              Effect_exports.tap(() => ctx.stroke()),
              Effect_exports.tap(() => ctx.closePath()),
              Effect_exports.tap(() => ctx.strokeStyle = "")
            )
          ),
          Match_exports.tag(
            "Image",
            ({ x, y, src }) => Effect_exports.void.pipe(
              Effect_exports.tap(
                () => Effect_exports.Do.pipe(
                  Effect_exports.bind("cache", () => Ref_exports.get(imageCacheRef)),
                  Effect_exports.tap(
                    ({ cache }) => pipe(
                      cache,
                      HashMap_exports.get(src),
                      Option_exports.getOrElse(() => {
                        const ret = new Image();
                        ret.src = src;
                        return ret;
                      }),
                      (img) => Effect_exports.void.pipe(
                        Effect_exports.tap(() => ctx.drawImage(img, x, y))
                      )
                    )
                  )
                )
              )
            )
          ),
          Match_exports.exhaustive
        )
      ),
      Effect_exports.all
    ) : Effect_exports.void.pipe(
      Effect_exports.tap(
        () => setTimeout(() => {
          const f = canvasView(width, height, fps, canvasId, view);
          f(model, dispatch);
        }, 0)
      )
    )
  ),
  Effect_exports.map(
    () => h(
      "canvas",
      {
        props: {
          id: canvasId,
          width,
          height
        },
        hook: {
          create: () => {
            window.addEventListener(
              "keydown",
              (e) => dispatch(
                MsgKeyDown.make({
                  key: e.key
                })
              )
            );
            window.addEventListener(
              "mousedown",
              (e) => dispatch(
                MsgMouseDown.make({
                  x: e.x,
                  y: e.y
                })
              )
            );
            setInterval(
              () => requestAnimationFrame(() => dispatch(MsgTick.make())),
              1e3 / fps
            );
          }
        }
      },
      []
    )
  ),
  Effect_exports.runSync
);
export {
  CanvasElement,
  CanvasImage,
  CanvasMsg,
  Clear,
  Line,
  MsgKeyDown,
  MsgMouseDown,
  MsgTick,
  NullElement,
  OutlinedCircle,
  OutlinedRectangle,
  SolidCircle,
  SolidRectangle,
  Text,
  canvasView
};
//# sourceMappingURL=cs12242-mvu_src_canvas.js.map
