{
  "version": 3,
  "sources": ["../../cs12242-mvu/src/canvas.ts"],
  "sourcesContent": ["import { type VNode } from \"snabbdom\"\nimport { h } from \".\"\nimport {\n  Array,\n  Match,\n  pipe,\n  Option,\n  Schema as S,\n  Effect,\n  Ref,\n  HashMap,\n} from \"effect\"\n\nexport const CanvasElement = S.Union(\n  S.TaggedStruct(\"NullElement\", {}),\n  S.TaggedStruct(\"Clear\", {\n    color: S.String,\n  }),\n  S.TaggedStruct(\"Text\", {\n    x: S.Number,\n    y: S.Number,\n    text: S.String,\n    color: S.String,\n    fontSize: S.Int,\n    font: S.optionalWith(S.String, {\n      default: () => \"sans-serif\",\n    }),\n    textAlign: S.optionalWith(\n      S.Union(\n        S.Literal(\"left\"), //\n        S.Literal(\"center\"),\n        S.Literal(\"right\"),\n      ),\n      {\n        default: () => \"center\",\n      },\n    ),\n  }),\n  S.TaggedStruct(\"SolidCircle\", {\n    x: S.Number,\n    y: S.Number,\n    radius: S.Number,\n    color: S.String,\n  }),\n  S.TaggedStruct(\"OutlinedCircle\", {\n    x: S.Number,\n    y: S.Number,\n    radius: S.Number,\n    color: S.String,\n    lineWidth: S.Number,\n  }),\n  S.TaggedStruct(\"SolidRectangle\", {\n    x: S.Number,\n    y: S.Number,\n    width: S.Number,\n    height: S.Number,\n    color: S.String,\n  }),\n  S.TaggedStruct(\"OutlinedRectangle\", {\n    x: S.Number,\n    y: S.Number,\n    width: S.Number,\n    height: S.Number,\n    color: S.String,\n    lineWidth: S.Number,\n  }),\n  S.TaggedStruct(\"Line\", {\n    x1: S.Number,\n    y1: S.Number,\n    x2: S.Number,\n    y2: S.Number,\n    color: S.String,\n    lineWidth: S.Number,\n  }),\n  S.TaggedStruct(\"Image\", {\n    x: S.Number,\n    y: S.Number,\n    src: S.String,\n  }),\n)\nexport type CanvasElement = typeof CanvasElement.Type\nexport const [\n  NullElement, //\n  Clear,\n  Text,\n  SolidCircle,\n  OutlinedCircle,\n  SolidRectangle,\n  OutlinedRectangle,\n  Line,\n  CanvasImage,\n] = CanvasElement.members\n\nexport const CanvasMsg = S.Union(\n  S.TaggedStruct(\"Canvas.MsgTick\", {}),\n  S.TaggedStruct(\"Canvas.MsgKeyDown\", {\n    key: S.String,\n  }),\n  S.TaggedStruct(\"Canvas.MsgMouseDown\", {\n    x: S.Number,\n    y: S.Number,\n  }),\n)\nexport type CanvasMsg = typeof CanvasMsg.Type\nexport const [MsgTick, MsgKeyDown, MsgMouseDown] = CanvasMsg.members\n\nconst imageCacheRef = Ref.unsafeMake(HashMap.empty())\n\nexport const canvasView =\n  <Model, Msg>(\n    width: number,\n    height: number,\n    fps: number,\n    canvasId: string,\n    view: (model: Model) => CanvasElement[],\n  ) =>\n  (model: Model, dispatch: (msg: CanvasMsg | Msg) => void) =>\n    Effect.Do.pipe(\n      Effect.let(\n        \"canvas\",\n        () => document.getElementById(canvasId) as HTMLCanvasElement | null,\n      ),\n      Effect.let(\"ctx\", ({ canvas }) => canvas?.getContext(\"2d\")),\n      Effect.tap(({ ctx }) =>\n        ctx != null ?\n          pipe(\n            view(model),\n            Array.map((e) =>\n              Match.value(e).pipe(\n                Match.tag(\"Clear\", ({ color }) =>\n                  Effect.void.pipe(\n                    Effect.tap(() => (ctx.fillStyle = color)),\n                    Effect.tap(() => ctx.fillRect(0, 0, width, height)),\n                    Effect.tap(() => (ctx.fillStyle = \"\")),\n                  ),\n                ),\n                Match.tag(\"NullElement\", () => Effect.void),\n                Match.tag(\n                  \"Text\",\n                  ({ x, y, text, color, font, fontSize, textAlign }) =>\n                    Effect.void.pipe(\n                      Effect.tap(() => (ctx.fillStyle = color)),\n                      Effect.tap(() => (ctx.textAlign = textAlign)),\n                      Effect.tap(() => (ctx.font = `${fontSize}px ${font}`)),\n                      Effect.tap(() => ctx.fillText(text, x, y)),\n                      Effect.tap(() => (ctx.fillStyle = \"\")),\n                    ),\n                ),\n                Match.tag(\"SolidCircle\", ({ x, y, radius, color }) =>\n                  Effect.void.pipe(\n                    Effect.tap(() => (ctx.fillStyle = color)),\n                    Effect.tap(() => ctx.beginPath()),\n                    Effect.tap(() => ctx.arc(x, y, radius, 0, 360)),\n                    Effect.tap(() => ctx.fill()),\n                    Effect.tap(() => ctx.closePath()),\n                    Effect.tap(() => (ctx.fillStyle = \"\")),\n                  ),\n                ),\n                Match.tag(\n                  \"OutlinedCircle\",\n                  ({ x, y, radius, color, lineWidth }) =>\n                    Effect.void.pipe(\n                      Effect.tap(() => (ctx.strokeStyle = color)),\n                      Effect.tap(() => (ctx.lineWidth = lineWidth)),\n                      Effect.tap(() => ctx.beginPath()),\n                      Effect.tap(() => ctx.arc(x, y, radius, 0, 360)),\n                      Effect.tap(() => ctx.closePath()),\n                      Effect.tap(() => (ctx.strokeStyle = \"\")),\n                    ),\n                ),\n                Match.tag(\"SolidRectangle\", ({ x, y, width, height, color }) =>\n                  Effect.void.pipe(\n                    Effect.tap(() => (ctx.fillStyle = color)),\n                    Effect.tap(() => ctx.beginPath()),\n                    Effect.tap(() => ctx.fillRect(x, y, width, height)),\n                    Effect.tap(() => ctx.fill()),\n                    Effect.tap(() => ctx.closePath()),\n                    Effect.tap(() => (ctx.fillStyle = \"\")),\n                  ),\n                ),\n                Match.tag(\n                  \"OutlinedRectangle\",\n                  ({ x, y, width, height, color, lineWidth }) =>\n                    Effect.void.pipe(\n                      Effect.tap(() => (ctx.strokeStyle = color)),\n                      Effect.tap(() => (ctx.lineWidth = lineWidth)),\n                      Effect.tap(() => ctx.beginPath()),\n                      Effect.tap(() => ctx.strokeRect(x, y, width, height)),\n                      Effect.tap(() => ctx.closePath()),\n                      Effect.tap(() => (ctx.strokeStyle = \"\")),\n                    ),\n                ),\n                Match.tag(\"Line\", ({ x1, y1, x2, y2, color, lineWidth }) =>\n                  Effect.void.pipe(\n                    Effect.tap(() => (ctx.strokeStyle = color)),\n                    Effect.tap(() => (ctx.lineWidth = lineWidth)),\n                    Effect.tap(() => ctx.beginPath()),\n                    Effect.tap(() => ctx.moveTo(x1, y1)),\n                    Effect.tap(() => ctx.lineTo(x2, y2)),\n                    Effect.tap(() => ctx.stroke()),\n                    Effect.tap(() => ctx.closePath()),\n                    Effect.tap(() => (ctx.strokeStyle = \"\")),\n                  ),\n                ),\n                Match.tag(\"Image\", ({ x, y, src }) =>\n                  Effect.void.pipe(\n                    Effect.tap(() =>\n                      Effect.Do.pipe(\n                        Effect.bind(\"cache\", () => Ref.get(imageCacheRef)),\n                        Effect.tap(({ cache }) =>\n                          pipe(\n                            cache,\n                            HashMap.get(src),\n                            Option.getOrElse(() => {\n                              // FIXME: Must wait for load event\n                              const ret = new Image()\n                              ret.src = src\n                              return ret\n                            }),\n                            (img) =>\n                              Effect.void.pipe(\n                                Effect.tap(() => ctx.drawImage(img, x, y)),\n                              ),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n                Match.exhaustive,\n              ),\n            ),\n            Effect.all,\n          )\n        : Effect.void.pipe(\n            Effect.tap(() =>\n              setTimeout(() => {\n                // Needed to guide type inference\n                const f = canvasView(width, height, fps, canvasId, view) as (\n                  model: Model,\n                  dispatch: (msg: Msg) => void,\n                ) => VNode\n                f(model, dispatch)\n              }, 0),\n            ),\n          ),\n      ),\n      Effect.map(() =>\n        h(\n          \"canvas\",\n          {\n            props: {\n              id: canvasId,\n              width,\n              height,\n            },\n\n            hook: {\n              create: () => {\n                window.addEventListener(\"keydown\", (e) =>\n                  dispatch(\n                    MsgKeyDown.make({\n                      key: e.key,\n                    }),\n                  ),\n                )\n                window.addEventListener(\"mousedown\", (e) =>\n                  dispatch(\n                    MsgMouseDown.make({\n                      x: e.x,\n                      y: e.y,\n                    }),\n                  ),\n                )\n                setInterval(\n                  () => requestAnimationFrame(() => dispatch(MsgTick.make())),\n                  1000.0 / fps,\n                )\n              },\n            },\n          },\n          [],\n        ),\n      ),\n      Effect.runSync,\n    )\n"],
  "mappings": "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",
  "names": ["width", "height"]
}
